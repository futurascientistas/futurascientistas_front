# Generated by Django 5.2.1 on 2025-06-23 16:50

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Deficiencia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Genero',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Raca',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('data_nascimento', models.DateField(blank=True, null=True, verbose_name='Data de nascimento')),
                ('pronomes', models.CharField(blank=True, max_length=50, verbose_name='Pronomes')),
                ('curriculo_lattes', models.URLField(blank=True, verbose_name='Currículo Lattes')),
                ('documento_cpf', models.FileField(blank=True, null=True, upload_to='documentos/cpf/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'jpeg', 'png'])])),
                ('documento_rg', models.FileField(blank=True, null=True, upload_to='documentos/rg/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'jpeg', 'png'])])),
                ('foto', models.FileField(blank=True, null=True, upload_to='documentos/foto/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'jpeg', 'png'])])),
                ('cep', models.CharField(blank=True, max_length=10)),
                ('rua', models.CharField(blank=True, max_length=150)),
                ('bairro', models.CharField(blank=True, max_length=100)),
                ('numero', models.CharField(blank=True, max_length=10)),
                ('complemento', models.CharField(blank=True, max_length=100)),
                ('cidade', models.CharField(blank=True, max_length=100)),
                ('estado', models.CharField(blank=True, max_length=2)),
                ('comprovante_residencia', models.FileField(blank=True, null=True, upload_to='documentos/residencia/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'jpeg', 'png'])])),
                ('autodeclaracao_racial', models.FileField(blank=True, null=True, upload_to='documentos/raca/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'jpeg', 'png'])])),
                ('comprovante_deficiencia', models.FileField(blank=True, null=True, upload_to='documentos/deficiencia/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'jpeg', 'png'])])),
                ('nome_escola', models.CharField(blank=True, max_length=150)),
                ('tipo_ensino', models.CharField(blank=True, max_length=100)),
                ('cep_escola', models.CharField(blank=True, max_length=10)),
                ('rua_escola', models.CharField(blank=True, max_length=150)),
                ('bairro_escola', models.CharField(blank=True, max_length=100)),
                ('numero_escola', models.CharField(blank=True, max_length=10)),
                ('complemento_escola', models.CharField(blank=True, max_length=100)),
                ('cidade_escola', models.CharField(blank=True, max_length=100)),
                ('estado_escola', models.CharField(blank=True, max_length=2)),
                ('telefone_escola', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(message='Telefone deve estar no formato: "+999999999". Até 15 dígitos permitidos.', regex='^\\+?1?\\d{9,15}$')])),
                ('telefone_responsavel_escola', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(message='Telefone deve estar no formato: "+999999999". Até 15 dígitos permitidos.', regex='^\\+?1?\\d{9,15}$')])),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('cpf', models.CharField(max_length=11, unique=True, validators=[django.core.validators.RegexValidator(message='CPF deve conter 11 dígitos numéricos.', regex='^\\d{11}$')], verbose_name='CPF')),
                ('telefone', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='Telefone deve estar no formato: "+999999999". Até 15 dígitos permitidos.', regex='^\\+?1?\\d{9,15}$')], verbose_name='Telefone')),
                ('nome', models.CharField(blank=True, max_length=150, verbose_name='Nome completo')),
                ('password_needs_reset', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('deficiencias', models.ManyToManyField(blank=True, to='users.deficiencia')),
                ('genero', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.genero', verbose_name='Gênero')),
                ('raca', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.raca')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
